#import * from "./schemas/manifest.graphql"
#import * into Fs from "ens/fs.polywrap.eth"
#import * into Concurrent from "ens/goerli/v2.interface.concurrent.polywrap.eth"
#import { Module } into PwrApp from "wrap://ens/pwr-app.eth"
#import { Module, LogLevel } into Logger from "wrap://ens/goerli/logger.polywrap.eth"

#########
# Each dependency may be executing one or more command concurrently
# command_graph keeps track of current executing commands
#########

type Module implements PwrApp_Module {
  getManifest(path: String!): MonowrapManifest!

  buildContextGraphs(manifest: MonowrapManifest!): BuiltContextGraphs!

  executeCommand(graph: BuiltContextGraphs!, scope: [String!]!, commands: [String!]!, logLevel: Logger_LogLevel!): Boolean!
}

type CommandNode {
  alias: String!
  uri: String!
  method: String!
  args: JSON!
  deps: BigInt!
  visited: Boolean!
}

type CommandGraph {
  vertices: Map! @annotate(type: "Map<String!, CommandNode!>!")
  adj_list: Map! @annotate(type: "Map<String!, [String!]!>!")
}

type DependencyNode {
  name: String!
  path: String!
  deps: BigInt!
  visited: Boolean!
}

type DependencyGraph {
  vertices: Map! @annotate(type: "Map<String!, DependencyNode!>!")
  adj_list: Map! @annotate(type: "Map<String!, [String!]!>!")
}

type BuiltContextGraphs {
  id: String!
  dependency_graph: DependencyGraph!
  command_graph: CommandGraph!
  sub_deps_execute_after: String!
}
